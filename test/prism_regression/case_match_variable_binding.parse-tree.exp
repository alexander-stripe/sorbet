Begin {
  stmts = [
    Assign {
      lhs = LVarLhs {
        name = <U lvar>
      }
      rhs = Integer {
        val = "1"
      }
    }
    CaseMatch {
      expr = Send {
        receiver = NULL
        method = <U foo>
        args = [
        ]
      }
      inBodies = [
        InPattern {
          pattern = ArrayPattern {
            elts = [
              MatchVar {
                name = <U x>
              }
            ]
          }
          guard = NULL
          body = DString {
            nodes = [
              String {
                val = <U An Array-like thing that only contains >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U x>
                  }
                ]
              }
            ]
          }
        }
        InPattern {
          pattern = HashPattern {
            pairs = [
              Pair {
                key = Symbol {
                  val = <U k>
                }
                value = MatchVar {
                  name = <U x>
                }
              }
            ]
          }
          guard = NULL
          body = DString {
            nodes = [
              String {
                val = <U A Hash-like whose key `:k` has value >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U x>
                  }
                ]
              }
            ]
          }
        }
        InPattern {
          pattern = ArrayPattern {
            elts = [
              ArrayPattern {
                elts = [
                  MatchVar {
                    name = <U value>
                  }
                ]
              }
              MatchRest {
                var = MatchVar {
                  name = <U tail>
                }
              }
            ]
          }
          guard = NULL
          body = DString {
            nodes = [
              String {
                val = <U An array-like thing that starts with a one-element Array containing >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U value>
                  }
                ]
              }
              String {
                val = <U , and ends with >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U tail>
                  }
                ]
              }
            ]
          }
        }
        InPattern {
          pattern = HashPattern {
            pairs = [
              Pair {
                key = Symbol {
                  val = <U k>
                }
                value = ArrayPattern {
                  elts = [
                    MatchVar {
                      name = <U value>
                    }
                  ]
                }
              }
            ]
          }
          guard = NULL
          body = DString {
            nodes = [
              String {
                val = <U A hash-like whose key `:k` has a one-element Array value containing >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U value>
                  }
                ]
              }
            ]
          }
        }
        InPattern {
          pattern = ArrayPattern {
            elts = [
              HashPattern {
                pairs = [
                  Pair {
                    key = Symbol {
                      val = <U k>
                    }
                    value = MatchVar {
                      name = <U value>
                    }
                  }
                ]
              }
              MatchRest {
                var = MatchVar {
                  name = <U tail>
                }
              }
            ]
          }
          guard = NULL
          body = DString {
            nodes = [
              String {
                val = <U An array-like thing that starts with a one-element Hash containing >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U value>
                  }
                ]
              }
              String {
                val = <U , and ends with >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U tail>
                  }
                ]
              }
            ]
          }
        }
        InPattern {
          pattern = HashPattern {
            pairs = [
              Pair {
                key = Symbol {
                  val = <U k>
                }
                value = HashPattern {
                  pairs = [
                    Pair {
                      key = Symbol {
                        val = <U k2>
                      }
                      value = MatchVar {
                        name = <U value>
                      }
                    }
                  ]
                }
              }
            ]
          }
          guard = NULL
          body = DString {
            nodes = [
              String {
                val = <U A hash-like whose key `:k` has a one-element Hash value containing k2: >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U value>
                  }
                ]
              }
            ]
          }
        }
        InPattern {
          pattern = MatchAs {
            value = Const {
              scope = NULL
              name = <C <U Integer>>
            }
            as = MatchVar {
              name = <U i>
            }
          }
          guard = NULL
          body = DString {
            nodes = [
              String {
                val = <U An Integer: >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U i>
                  }
                ]
              }
            ]
          }
        }
        InPattern {
          pattern = MatchVar {
            name = <U x>
          }
          guard = NULL
          body = DString {
            nodes = [
              String {
                val = <U Some other value: >
              }
              Begin {
                stmts = [
                  LVar {
                    name = <U x>
                  }
                ]
              }
            ]
          }
        }
      ]
      elseBody = NULL
    }
  ]
}
